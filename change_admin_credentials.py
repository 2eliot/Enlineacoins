#!/usr/bin/env python3
"""
Script para cambiar las credenciales de administrador de INEFABLE STORE
Ejecutar este script para cambiar el email y contrase√±a del administrador
"""

import os
import getpass
import secrets

def change_admin_credentials():
    """
    Cambia las credenciales de administrador
    """
    print("üîë CAMBIAR CREDENCIALES DE ADMINISTRADOR")
    print("=" * 40)
    
    # Solicitar nuevo email
    while True:
        new_email = input("Nuevo email de administrador: ").strip()
        if new_email and "@" in new_email:
            break
        print("‚ùå Por favor ingresa un email v√°lido")
    
    # Opciones para la contrase√±a
    print("\nOpciones para la contrase√±a:")
    print("1. Generar contrase√±a aleatoria segura (recomendado)")
    print("2. Ingresar contrase√±a personalizada")
    
    while True:
        opcion = input("Selecciona una opci√≥n (1 o 2): ").strip()
        if opcion in ['1', '2']:
            break
        print("‚ùå Por favor selecciona 1 o 2")
    
    if opcion == '1':
        # Generar contrase√±a aleatoria
        new_password = secrets.token_urlsafe(16)
        print(f"\nüîê Contrase√±a generada: {new_password}")
        print("‚ö†Ô∏è GUARDA ESTA CONTRASE√ëA EN UN LUGAR SEGURO")
    else:
        # Contrase√±a personalizada
        while True:
            new_password = getpass.getpass("Nueva contrase√±a: ")
            confirm_password = getpass.getpass("Confirmar contrase√±a: ")
            
            if new_password == confirm_password:
                if len(new_password) >= 8:
                    break
                else:
                    print("‚ùå La contrase√±a debe tener al menos 8 caracteres")
            else:
                print("‚ùå Las contrase√±as no coinciden")
    
    # Mostrar comandos para configurar variables de entorno
    print("\nüõ°Ô∏è CONFIGURAR VARIABLES DE ENTORNO:")
    print("=" * 35)
    print("Ejecuta estos comandos en tu servidor:")
    print(f"export ADMIN_EMAIL='{new_email}'")
    print(f"export ADMIN_PASSWORD='{new_password}'")
    
    # Para Windows
    print("\nEn Windows (CMD):")
    print(f"set ADMIN_EMAIL={new_email}")
    print(f"set ADMIN_PASSWORD={new_password}")
    
    # Para Windows (PowerShell)
    print("\nEn Windows (PowerShell):")
    print(f"$env:ADMIN_EMAIL='{new_email}'")
    print(f"$env:ADMIN_PASSWORD='{new_password}'")
    
    # Crear archivo .env local (opcional)
    create_env = input("\n¬øCrear archivo .env local para desarrollo? (s/n): ").strip().lower()
    
    if create_env in ['s', 'si', 'y', 'yes']:
        env_content = f"""# Variables de entorno para desarrollo local
# NO SUBIR ESTE ARCHIVO A REPOSITORIOS P√öBLICOS

ADMIN_EMAIL={new_email}
ADMIN_PASSWORD={new_password}

# Otras variables (generar con production_config.py)
# SECRET_KEY=tu_clave_secreta
# ENCRYPTION_KEY=tu_clave_encriptacion
# DATABASE_PATH=usuarios.db
# FLASK_ENV=development
# FLASK_DEBUG=True
"""
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Archivo .env creado")
        print("‚ö†Ô∏è IMPORTANTE: Agrega .env a tu .gitignore")
        
        # Crear .gitignore si no existe
        gitignore_content = """
# Variables de entorno
.env
.env.local
.env.production

# Base de datos
*.db
usuarios.db

# Backups
backups/
*.gz

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/

# Logs
logs/
*.log
"""
        
        if not os.path.exists('.gitignore'):
            with open('.gitignore', 'w') as f:
                f.write(gitignore_content)
            print("‚úÖ Archivo .gitignore creado")
    
    print("\n‚úÖ CREDENCIALES ACTUALIZADAS")
    print("=" * 25)
    print(f"Email: {new_email}")
    print(f"Contrase√±a: {'*' * len(new_password)}")
    
    print("\nüìù PR√ìXIMOS PASOS:")
    print("1. Configurar las variables de entorno en tu servidor")
    print("2. Reiniciar la aplicaci√≥n")
    print("3. Probar el login con las nuevas credenciales")
    print("4. Eliminar las credenciales por defecto del c√≥digo (si las hay)")
    
    return new_email, new_password

def test_credentials():
    """
    Prueba las credenciales configuradas
    """
    admin_email = os.environ.get('ADMIN_EMAIL')
    admin_password = os.environ.get('ADMIN_PASSWORD')
    
    if admin_email and admin_password:
        print("‚úÖ Variables de entorno configuradas:")
        print(f"ADMIN_EMAIL: {admin_email}")
        print(f"ADMIN_PASSWORD: {'*' * len(admin_password)}")
    else:
        print("‚ùå Variables de entorno no configuradas")
        print("Ejecuta el script para configurar las credenciales")

if __name__ == "__main__":
    print("INEFABLE STORE - Gesti√≥n de Credenciales de Administrador")
    print("=" * 55)
    
    print("\nOpciones:")
    print("1. Cambiar credenciales de administrador")
    print("2. Verificar credenciales actuales")
    print("3. Salir")
    
    while True:
        opcion = input("\nSelecciona una opci√≥n (1, 2 o 3): ").strip()
        
        if opcion == '1':
            change_admin_credentials()
            break
        elif opcion == '2':
            test_credentials()
            break
        elif opcion == '3':
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Por favor selecciona 1, 2 o 3")
