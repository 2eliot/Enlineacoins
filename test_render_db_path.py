#!/usr/bin/env python3
"""
Test script para verificar la configuraci√≥n de base de datos compatible con Render
"""

import os
import sqlite3
import sys

def test_render_db_path():
    """Prueba la configuraci√≥n de ruta de base de datos para Render"""
    print("üîç Probando configuraci√≥n de base de datos para Render...")
    
    # Simular entorno de Render
    os.environ['RENDER'] = '1'
    
    # Importar funci√≥n despu√©s de configurar la variable de entorno
    sys.path.append('.')
    from app import get_render_compatible_db_path, DATABASE, get_db_connection_optimized, return_db_connection
    
    print(f"‚úÖ Ruta de base de datos: {DATABASE}")
    print(f"‚úÖ Directorio actual: {os.getcwd()}")
    print(f"‚úÖ Variable RENDER: {os.environ.get('RENDER')}")
    
    # Verificar que la ruta es correcta para Render
    expected_path = 'usuarios.db'
    if DATABASE == expected_path:
        print(f"‚úÖ Ruta correcta para Render: {DATABASE}")
    else:
        print(f"‚ùå Ruta incorrecta. Esperado: {expected_path}, Obtenido: {DATABASE}")
        return False
    
    # Probar conexi√≥n optimizada
    try:
        conn = get_db_connection_optimized()
        print("‚úÖ Conexi√≥n optimizada establecida correctamente")
        
        # Probar una consulta simple
        cursor = conn.execute("SELECT 1 as test")
        result = cursor.fetchone()
        if result and result[0] == 1:
            print("‚úÖ Consulta de prueba exitosa")
        else:
            print("‚ùå Error en consulta de prueba")
            return False
        
        return_db_connection(conn)
        print("‚úÖ Conexi√≥n cerrada correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n optimizada: {e}")
        return False
    
    # Verificar que el archivo de base de datos se crea en el directorio correcto
    if os.path.exists(DATABASE):
        print(f"‚úÖ Archivo de base de datos existe: {DATABASE}")
        
        # Verificar que est√° en el directorio ra√≠z del proyecto
        if os.path.dirname(DATABASE) == '' or os.path.dirname(DATABASE) == '.':
            print("‚úÖ Base de datos en directorio ra√≠z (compatible con Render)")
        else:
            print(f"‚ùå Base de datos no est√° en directorio ra√≠z: {os.path.dirname(DATABASE)}")
            return False
    else:
        print(f"‚ö†Ô∏è  Archivo de base de datos no existe a√∫n: {DATABASE}")
    
    return True

def test_profitability_functions():
    """Prueba las funciones de rentabilidad con la nueva configuraci√≥n"""
    print("\nüîç Probando funciones de rentabilidad...")
    
    try:
        from app import get_purchase_price, update_purchase_price
        
        # Probar obtener precio de compra
        precio = get_purchase_price('freefire_latam', 1)
        print(f"‚úÖ get_purchase_price funciona: ${precio:.2f}")
        
        # Probar actualizar precio de compra
        success = update_purchase_price('freefire_latam', 1, 0.60)
        if success:
            print("‚úÖ update_purchase_price funciona correctamente")
            
            # Verificar que se actualiz√≥
            nuevo_precio = get_purchase_price('freefire_latam', 1)
            if abs(nuevo_precio - 0.60) < 0.01:
                print(f"‚úÖ Precio actualizado correctamente: ${nuevo_precio:.2f}")
            else:
                print(f"‚ùå Precio no se actualiz√≥ correctamente: ${nuevo_precio:.2f}")
                return False
        else:
            print("‚ùå update_purchase_price fall√≥")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en funciones de rentabilidad: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de compatibilidad con Render...")
    
    # Limpiar variable de entorno al inicio
    if 'RENDER' in os.environ:
        del os.environ['RENDER']
    
    # Test 1: Configuraci√≥n de base de datos
    if test_render_db_path():
        print("‚úÖ Test 1 PASADO: Configuraci√≥n de base de datos")
    else:
        print("‚ùå Test 1 FALLIDO: Configuraci√≥n de base de datos")
        sys.exit(1)
    
    # Test 2: Funciones de rentabilidad
    if test_profitability_functions():
        print("‚úÖ Test 2 PASADO: Funciones de rentabilidad")
    else:
        print("‚ùå Test 2 FALLIDO: Funciones de rentabilidad")
        sys.exit(1)
    
    print("\nüéâ TODOS LOS TESTS PASARON - Sistema listo para Render")
    
    # Limpiar variable de entorno al final
    if 'RENDER' in os.environ:
        del os.environ['RENDER']
