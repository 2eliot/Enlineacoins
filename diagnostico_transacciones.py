#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico de Eliminaci√≥n de Transacciones
Analiza las posibles causas de por qu√© se borra el historial de usuarios
"""

import sqlite3
import os
from datetime import datetime, timedelta

def get_db_connection():
    """Obtiene conexi√≥n a la base de datos"""
    DATABASE = 'usuarios.db'
    if os.environ.get('DATABASE_PATH'):
        DATABASE = os.environ.get('DATABASE_PATH')
    
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def analizar_problemas_eliminacion():
    """Analiza los problemas potenciales de eliminaci√≥n de transacciones"""
    print("üîç DIAGN√ìSTICO: An√°lisis de Eliminaci√≥n de Transacciones")
    print("=" * 60)
    
    conn = get_db_connection()
    
    # 1. Verificar si existe la funci√≥n de limpieza autom√°tica
    print("\n1Ô∏è‚É£ LIMPIEZA AUTOM√ÅTICA DE TRANSACCIONES ANTIGUAS:")
    print("-" * 50)
    
    # Calcular fecha l√≠mite (1 semana atr√°s)
    fecha_limite = datetime.now() - timedelta(weeks=1)
    fecha_limite_str = fecha_limite.strftime('%Y-%m-%d %H:%M:%S')
    
    # Contar transacciones que ser√≠an eliminadas por la limpieza autom√°tica
    transacciones_antiguas = conn.execute('''
        SELECT COUNT(*) FROM transacciones 
        WHERE fecha < ?
    ''', (fecha_limite_str,)).fetchone()[0]
    
    print(f"üìÖ Fecha l√≠mite: {fecha_limite_str}")
    print(f"üóëÔ∏è Transacciones que ser√≠an eliminadas: {transacciones_antiguas}")
    
    if transacciones_antiguas > 0:
        print("‚ö†Ô∏è PROBLEMA IDENTIFICADO: La limpieza autom√°tica est√° eliminando transacciones")
        print("   Esta funci√≥n se ejecuta cada vez que un usuario carga la p√°gina principal")
    
    # 2. Verificar l√≠mite de 30 transacciones por usuario
    print("\n2Ô∏è‚É£ L√çMITE DE 30 TRANSACCIONES POR USUARIO:")
    print("-" * 50)
    
    usuarios_con_exceso = conn.execute('''
        SELECT usuario_id, COUNT(*) as total_transacciones
        FROM transacciones 
        GROUP BY usuario_id 
        HAVING COUNT(*) > 30
        ORDER BY total_transacciones DESC
    ''').fetchall()
    
    if usuarios_con_exceso:
        print("‚ö†Ô∏è PROBLEMA IDENTIFICADO: Usuarios con m√°s de 30 transacciones")
        for usuario in usuarios_con_exceso:
            print(f"   Usuario ID {usuario['usuario_id']}: {usuario['total_transacciones']} transacciones")
            
            # Calcular cu√°ntas ser√≠an eliminadas
            transacciones_a_eliminar = usuario['total_transacciones'] - 30
            print(f"   ‚Üí Se eliminar√≠an {transacciones_a_eliminar} transacciones m√°s antiguas")
    else:
        print("‚úÖ No hay usuarios con m√°s de 30 transacciones")
    
    # 3. Verificar distribuci√≥n de transacciones por fecha
    print("\n3Ô∏è‚É£ DISTRIBUCI√ìN DE TRANSACCIONES POR FECHA:")
    print("-" * 50)
    
    # √öltimos 7 d√≠as
    for i in range(7):
        fecha = datetime.now() - timedelta(days=i)
        fecha_str = fecha.strftime('%Y-%m-%d')
        
        count = conn.execute('''
            SELECT COUNT(*) FROM transacciones 
            WHERE DATE(fecha) = ?
        ''', (fecha_str,)).fetchone()[0]
        
        dia_nombre = fecha.strftime('%A')
        print(f"   {fecha_str} ({dia_nombre}): {count} transacciones")
    
    # 4. Verificar transacciones m√°s antiguas
    print("\n4Ô∏è‚É£ TRANSACCIONES M√ÅS ANTIGUAS:")
    print("-" * 50)
    
    transaccion_mas_antigua = conn.execute('''
        SELECT MIN(fecha) as fecha_mas_antigua FROM transacciones
    ''').fetchone()
    
    if transaccion_mas_antigua and transaccion_mas_antigua['fecha_mas_antigua']:
        print(f"üìÖ Transacci√≥n m√°s antigua: {transaccion_mas_antigua['fecha_mas_antigua']}")
        
        # Calcular antig√ºedad
        try:
            fecha_antigua = datetime.strptime(transaccion_mas_antigua['fecha_mas_antigua'], '%Y-%m-%d %H:%M:%S')
            antiguedad = datetime.now() - fecha_antigua
            print(f"‚è∞ Antig√ºedad: {antiguedad.days} d√≠as")
            
            if antiguedad.days > 7:
                print("‚ö†Ô∏è PROBLEMA: Hay transacciones de m√°s de 7 d√≠as que deber√≠an haber sido eliminadas")
        except:
            print("‚ùå Error al calcular antig√ºedad")
    else:
        print("‚ùå No hay transacciones en la base de datos")
    
    # 5. Verificar usuarios espec√≠ficos con pocas transacciones
    print("\n5Ô∏è‚É£ USUARIOS CON POCAS TRANSACCIONES:")
    print("-" * 50)
    
    usuarios_pocas_transacciones = conn.execute('''
        SELECT u.id, u.nombre, u.apellido, u.correo, COUNT(t.id) as total_transacciones
        FROM usuarios u
        LEFT JOIN transacciones t ON u.id = t.usuario_id
        GROUP BY u.id, u.nombre, u.apellido, u.correo
        HAVING COUNT(t.id) < 5
        ORDER BY total_transacciones ASC
    ''').fetchall()
    
    if usuarios_pocas_transacciones:
        print("üë• Usuarios con menos de 5 transacciones:")
        for usuario in usuarios_pocas_transacciones:
            print(f"   {usuario['nombre']} {usuario['apellido']} ({usuario['correo']}): {usuario['total_transacciones']} transacciones")
    else:
        print("‚úÖ Todos los usuarios tienen 5 o m√°s transacciones")
    
    # 6. Verificar total de transacciones en el sistema
    print("\n6Ô∏è‚É£ ESTAD√çSTICAS GENERALES:")
    print("-" * 50)
    
    total_transacciones = conn.execute('SELECT COUNT(*) FROM transacciones').fetchone()[0]
    total_usuarios = conn.execute('SELECT COUNT(*) FROM usuarios').fetchone()[0]
    
    print(f"üìä Total de transacciones: {total_transacciones}")
    print(f"üë• Total de usuarios: {total_usuarios}")
    
    if total_usuarios > 0:
        promedio_transacciones = total_transacciones / total_usuarios
        print(f"üìà Promedio de transacciones por usuario: {promedio_transacciones:.2f}")
    
    conn.close()

def simular_limpieza_automatica():
    """Simula la limpieza autom√°tica para ver qu√© se eliminar√≠a"""
    print("\nüß™ SIMULACI√ìN DE LIMPIEZA AUTOM√ÅTICA:")
    print("=" * 60)
    
    conn = get_db_connection()
    
    # Calcular fecha l√≠mite (1 semana atr√°s)
    fecha_limite = datetime.now() - timedelta(weeks=1)
    fecha_limite_str = fecha_limite.strftime('%Y-%m-%d %H:%M:%S')
    
    print(f"üìÖ Fecha l√≠mite: {fecha_limite_str}")
    
    # Obtener transacciones que ser√≠an eliminadas
    transacciones_a_eliminar = conn.execute('''
        SELECT t.*, u.nombre, u.apellido, u.correo
        FROM transacciones t
        JOIN usuarios u ON t.usuario_id = u.id
        WHERE t.fecha < ?
        ORDER BY t.fecha DESC
    ''', (fecha_limite_str,)).fetchall()
    
    if transacciones_a_eliminar:
        print(f"üóëÔ∏è Se eliminar√≠an {len(transacciones_a_eliminar)} transacciones:")
        print("\nDetalle de transacciones que se eliminar√≠an:")
        for trans in transacciones_a_eliminar[:10]:  # Mostrar solo las primeras 10
            print(f"   - Usuario: {trans['nombre']} {trans['apellido']}")
            print(f"     Fecha: {trans['fecha']}")
            print(f"     Monto: ${abs(trans['monto']):.2f}")
            print(f"     Control: {trans['numero_control']}")
            print()
        
        if len(transacciones_a_eliminar) > 10:
            print(f"   ... y {len(transacciones_a_eliminar) - 10} m√°s")
    else:
        print("‚úÖ No hay transacciones que ser√≠an eliminadas por la limpieza autom√°tica")
    
    conn.close()

def verificar_configuracion_actual():
    """Verifica la configuraci√≥n actual que podr√≠a estar causando problemas"""
    print("\n‚öôÔ∏è CONFIGURACI√ìN ACTUAL:")
    print("=" * 60)
    
    print("üîß Configuraciones problem√°ticas identificadas:")
    print("   1. Limpieza autom√°tica se ejecuta en CADA carga de p√°gina principal")
    print("   2. L√≠mite de 30 transacciones por usuario se aplica en CADA compra")
    print("   3. Limpieza de transacciones de m√°s de 1 semana es muy agresiva")
    
    print("\nüí° RECOMENDACIONES:")
    print("   1. Cambiar limpieza autom√°tica para que se ejecute solo 1 vez al d√≠a")
    print("   2. Aumentar l√≠mite de transacciones por usuario (de 30 a 100)")
    print("   3. Cambiar per√≠odo de limpieza de 1 semana a 1 mes")
    print("   4. Agregar logs para rastrear cu√°ndo se eliminan transacciones")

if __name__ == "__main__":
    try:
        analizar_problemas_eliminacion()
        simular_limpieza_automatica()
        verificar_configuracion_actual()
        
        print("\n" + "=" * 60)
        print("‚úÖ DIAGN√ìSTICO COMPLETADO")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Error durante el diagn√≥stico: {e}")
